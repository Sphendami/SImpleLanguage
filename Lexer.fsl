{
open Parser

let lexeme = FSharp.Text.Lexing.LexBuffer<_>.LexemeString

let newline (lexbuf:FSharp.Text.Lexing.LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine
}
rule token = parse
    [' ' '\t'] {token lexbuf}
    | '\n' {newline lexbuf; token lexbuf}
    | ";;" {EOT}
    | "true" {TRUE}
    | "false" {FALSE}
    | "if" {IF}
    | "then" {THEN}
    | "else" {ELSE}
    | "fun" {FUN}
    | "let" {LET}
    | "rec" {REC}
    | "in" {IN}
    | "#help" {HASHHELP}
    | "#load" {HASHLOAD}
    | "#exit" {HASHEXIT}
    | ['a'-'z' '_'] ['A'-'Z' 'a'-'z' '0'-'9' '_']*
        {VAR (lexeme lexbuf)}
    | ['+' '-']? ['0'-'9']+ {INTEGER (lexeme lexbuf |> int)}
    | '+' {PLUS}
    | '-' {MINUS}
    | '*' {STAR}
    | '/' {SLASH}
    | "&&" {ANDAND}
    | "||" {PIPEPIPE}
    | '=' {EQUAL}
    | '<' {LESSTHAN}
    | '>' {GREATERTHAN}
    | "<=" {LESSTHANEQ}
    | ">=" {GREATERTHANEQ}
    | "->" {RARROW}
    | '(' {LPAREN}
    | ')' {RPAREN}
    | eof {EOF}