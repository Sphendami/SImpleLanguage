%token <string> VAR
%token FUN RARROW
%token LPAREN RPAREN
%token TRUE FALSE
%token IF THEN ELSE
%token <int> INTEGER
%token PLUS MINUS STAR SLASH
%token EOT
%nonassoc PLUS MINUS
%nonassoc STAR SLASH
%start main
%type <Language.Term> main
%%
atom:
    | TRUE {Language.True}
    | FALSE {Language.False}
    | INTEGER {Language.Integer $1}
    | LPAREN term RPAREN {$2}
    | VAR {Language.Var $1}
;
applist:
    | atom {$1}
    | applist atom {Language.App ($1, $2)}
;
expr:
    | applist {$1}
    | expr PLUS expr {Language.BinaryOp (Language.Add, $1, $3)}
    | expr MINUS expr {Language.BinaryOp (Language.Sub, $1, $3)}
    | expr STAR expr {Language.BinaryOp (Language.Mul, $1, $3)}
    | expr SLASH expr {Language.BinaryOp (Language.Div, $1, $3)}
;
term:
    | expr {$1}
    | FUN term RARROW term {
        let arg =
            match $2 with
            | Language.Var s -> s
            | _ -> failwith "parse error"
        Language.Abs (arg, $4)
    }
    | IF term THEN term ELSE term {
        Language.If ($2, $4, $6)
    }
;
main:
    term EOT {$1}
;