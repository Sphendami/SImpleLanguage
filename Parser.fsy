%{
open Language

let openVar var =
    match var with
    | Var s -> s
    | _ -> failwith "parse error"
%}
%token <string> VAR
%token FUN RARROW
%token LPAREN RPAREN
%token TRUE FALSE
%token IF THEN ELSE
%token <int> INTEGER
%token PLUS MINUS STAR SLASH
%token ANDAND PIPEPIPE
%token EQUAL LESSTHAN GREATERTHAN LESSTHANEQ GREATERTHANEQ
%token LET REC IN
%token HASHHELP HASHLOAD HASHEXIT
%token EOT
%token EOF

%left ANDAND PIPEPIPE
%left EQUAL LESSTHAN GREATERTHAN LESSTHANEQ GREATERTHANEQ
%left PLUS MINUS
%left STAR SLASH

%start main
%type <Language.Toplevel> main
%%
atom:
    | TRUE {Boolean true}
    | FALSE {Boolean false}
    | INTEGER {Integer $1}
    | LPAREN term RPAREN {$2}
    | VAR {Var $1}
;
applist:
    | atom {$1}
    | applist atom {App ($1, $2)}
;
expr:
    | applist {$1}
    | expr PLUS expr {BinaryOp (Add, $1, $3)}
    | expr MINUS expr {BinaryOp (Sub, $1, $3)}
    | expr STAR expr {BinaryOp (Mul, $1, $3)}
    | expr SLASH expr {BinaryOp (Div, $1, $3)}
    | expr ANDAND expr {BinaryOp (And, $1, $3)}
    | expr PIPEPIPE expr {BinaryOp (Or, $1, $3)}
    | expr EQUAL expr {BinaryOp (Equal, $1, $3)}
    | expr LESSTHAN expr {BinaryOp (Lt, $1, $3)}
    | expr GREATERTHAN expr {BinaryOp (Gt, $1, $3)}
    | expr LESSTHANEQ expr {BinaryOp (Lte, $1, $3)}
    | expr GREATERTHANEQ expr {BinaryOp (Gte, $1, $3)}
;
term:
    | expr {$1}
    | FUN atom RARROW term {
        let arg = openVar $2
        Abs (arg, $4)
    }
    | IF term THEN term ELSE term {If ($2, $4, $6)}
    | LET atom EQUAL term IN term {
        let x = openVar $2
        Let (x, $4, $6)
    }
    | LET REC atom EQUAL term IN term {
        let x = openVar $3
        LetRec (x, $5, $7)
    }
;
toplevellet:
    | LET atom EQUAL term {
        let x = openVar $2
        x, $4
    }
    | LET REC atom EQUAL term {
        let x = openVar $3
        x, LetRec (x, $5, $3)
    }
;
directive:
    | HASHHELP {Help}
    | HASHLOAD atom {
        let file = openVar $2
        Load file
    }
    | HASHEXIT {Exit}
;
main:
    | term EOT {Term $1}
    | toplevellet EOT {ToplevelLet $1}
    | directive EOT {Directive $1}
    | EOF {Eof}
;